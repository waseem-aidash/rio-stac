{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rio-stac \u00b6 Create STAC Items from raster datasets. Documentation : developmentseed.github.io/rio-stac/ Source Code : developmentseed/rio-stac rio-stac is a simple rasterio plugin for creating valid STAC item from raster dataset. The library is built on top of pystac to make sure we follow the STAC specification. Installation \u00b6 $ pip install pip -U # From Pypi $ pip install rio-stac # Or from source $ pip install git+http://github.com/developmentseed/rio-stac Contribution & Development \u00b6 See CONTRIBUTING.md Authors \u00b6 See contributors Changes \u00b6 See CHANGES.md . License \u00b6 See LICENSE","title":"Home"},{"location":"#rio-stac","text":"Create STAC Items from raster datasets. Documentation : developmentseed.github.io/rio-stac/ Source Code : developmentseed/rio-stac rio-stac is a simple rasterio plugin for creating valid STAC item from raster dataset. The library is built on top of pystac to make sure we follow the STAC specification.","title":"rio-stac"},{"location":"#installation","text":"$ pip install pip -U # From Pypi $ pip install rio-stac # Or from source $ pip install git+http://github.com/developmentseed/rio-stac","title":"Installation"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#authors","text":"See contributors","title":"Authors"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#license","text":"See LICENSE","title":"License"},{"location":"contributing/","text":"Contributing \u00b6 Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-tiler $ pip install -e . [ dev ] Python3.8 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs $ git clone https://github.com/cogeotiff/rio-tiler.git $ cd rio-tiler $ pip install -e . [ \"docs\" ] Create API docs $ pdocs as_markdown --output_dir docs/api/ --exclude_source --overwrite rio_stac.stac Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#contributing","text":"Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/rio-stac.git $ cd rio-tiler $ pip install -e . [ dev ] Python3.8 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs $ git clone https://github.com/cogeotiff/rio-tiler.git $ cd rio-tiler $ pip install -e . [ \"docs\" ] Create API docs $ pdocs as_markdown --output_dir docs/api/ --exclude_source --overwrite rio_stac.stac Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Contributing"},{"location":"intro/","text":"rio-stac can be used either from the command line as a rasterio plugin ( rio stac ) or from your own script. For more information about the Item specification, please see github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md CLI \u00b6 $ rio stac --help Usage: rio stac [OPTIONS] INPUT Rasterio stac cli. Options: -d, --datetime TEXT The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01). -e, --extension TEXT STAC extensions the Item implements (default is set to [\"proj\"]). Multiple allowed (e.g. `-e extension1 -e extensio2`). -c, --collection TEXT The Collection ID that this item belongs to. -p, --property NAME=VALUE Additional property to add (e.g `-p myprops=1`). Multiple allowed. --id TEXT Item id. -n, --asset-name TEXT Asset name. --asset-href TEXT Overwrite asset href. --asset-mediatype [COG|GEOJSON|GEOPACKAGE|GEOTIFF|HDF|HDF5|JPEG|JPEG2000|JSON|PNG|TEXT|TIFF|XML|auto] Asset media-type. -o, --output PATH Output file name --help Show this message and exit. How To \u00b6 The CLI can be run as is, just by passing a source raster data. You can also use options to customize the output STAC item: datetime (-d, --datetime) By design, all STAC items must have a datetime in their properties. By default the CLI will set the time to the actual UTC Time. The CLI will accept any format supported by dateparser . You can also define start_datetime and end_datetime by using --datetime {start}/{end} notation. extension (-e, --extension) STAC Item can have extensions which indicates that the item has additional properies (e.g proj information). This option can be set multiple times. By default the proj extension will be added to the item. { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" } You can overwrite the default by setting your own list of extensions (e.g -e extension1 -e extension2 ). \u00a1\u00a1\u00a1 important !!! To exclude any extension you MUST set: --extension \"\" If you want to add extension and still have the proj extension enabled, you MUST add it back: --extension myext --extension proj collection (-c, --collection) Add a collection attribute to the item. Note: This won't add the collection's link . properties (-p, --property) You can add multiple properties to the item using -p {KEY}={VALUE} notation. This option can be set multiple times. id (--id) STAC Item id to set. Default to the source basename. asset name (-n, --asset-name) Name to use in the assets section. Default to asset . { \"asset\": { \"href\": \"raster.tif\" } } asset href (--asset-href) Overwrite the HREF in the asset object. Default to the source path. media type (--asset-mediatype) Set the asset mediatype . If set to auto , rio-stac will try to find the mediatype. Example \u00b6 $ rio stac raster.tif | jq { \"type\": \"Feature\", \"stac_version\": \"1.0.0-beta.2\", \"id\": \"raster.tif\", \"properties\": { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [...] }, \"links\": [], \"assets\": { \"asset\": { \"href\": \"raster.tif\" } }, \"bbox\": [...], \"stac_extensions\": [\"proj\"] } $ rio stac S-2_20200422_COG.tif \\ -d 2020-04-22 \\ -e proj -e comments \\ -c myprivatecollection \\ -p comments:name=myfile \\ --id COG \\ -n mosaic \\ --asset-href https://somewhere.overtherainbow.io/S-2_20200422_COG.tif \\ --asset-mediatype COG | jq { \"type\": \"Feature\", \"stac_version\": \"1.0.0-beta.2\", \"id\": \"COG\", \"properties\": { \"comments:name\": \"myfile\", \"proj:epsg\": 32632, \"proj:geometry\": { \"type\": \"Polygon\", \"coordinates\": [...] }, \"proj:bbox\": [...], \"proj:shape\": [28870, 33145], \"proj:transform\": [...], \"datetime\": \"2020-04-22T00:00:00Z\" }, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"links\": [], \"assets\": { \"mosaic\": { \"href\": \"https://somewhere.overtherainbow.io/S-2_20200422_COG.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\" } }, \"bbox\": [...], \"stac_extensions\": [ \"proj\", \"comments\" ], \"collection\": \"myprivatecollection\" } API \u00b6 see: api","title":"User Guide"},{"location":"intro/#cli","text":"$ rio stac --help Usage: rio stac [OPTIONS] INPUT Rasterio stac cli. Options: -d, --datetime TEXT The date and time of the assets, in UTC (e.g 2020-01-01, 2020-01-01T01:01:01). -e, --extension TEXT STAC extensions the Item implements (default is set to [\"proj\"]). Multiple allowed (e.g. `-e extension1 -e extensio2`). -c, --collection TEXT The Collection ID that this item belongs to. -p, --property NAME=VALUE Additional property to add (e.g `-p myprops=1`). Multiple allowed. --id TEXT Item id. -n, --asset-name TEXT Asset name. --asset-href TEXT Overwrite asset href. --asset-mediatype [COG|GEOJSON|GEOPACKAGE|GEOTIFF|HDF|HDF5|JPEG|JPEG2000|JSON|PNG|TEXT|TIFF|XML|auto] Asset media-type. -o, --output PATH Output file name --help Show this message and exit.","title":"CLI"},{"location":"intro/#how-to","text":"The CLI can be run as is, just by passing a source raster data. You can also use options to customize the output STAC item: datetime (-d, --datetime) By design, all STAC items must have a datetime in their properties. By default the CLI will set the time to the actual UTC Time. The CLI will accept any format supported by dateparser . You can also define start_datetime and end_datetime by using --datetime {start}/{end} notation. extension (-e, --extension) STAC Item can have extensions which indicates that the item has additional properies (e.g proj information). This option can be set multiple times. By default the proj extension will be added to the item. { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" } You can overwrite the default by setting your own list of extensions (e.g -e extension1 -e extension2 ). \u00a1\u00a1\u00a1 important !!! To exclude any extension you MUST set: --extension \"\" If you want to add extension and still have the proj extension enabled, you MUST add it back: --extension myext --extension proj collection (-c, --collection) Add a collection attribute to the item. Note: This won't add the collection's link . properties (-p, --property) You can add multiple properties to the item using -p {KEY}={VALUE} notation. This option can be set multiple times. id (--id) STAC Item id to set. Default to the source basename. asset name (-n, --asset-name) Name to use in the assets section. Default to asset . { \"asset\": { \"href\": \"raster.tif\" } } asset href (--asset-href) Overwrite the HREF in the asset object. Default to the source path. media type (--asset-mediatype) Set the asset mediatype . If set to auto , rio-stac will try to find the mediatype.","title":"How To"},{"location":"intro/#example","text":"$ rio stac raster.tif | jq { \"type\": \"Feature\", \"stac_version\": \"1.0.0-beta.2\", \"id\": \"raster.tif\", \"properties\": { \"proj:epsg\": 3857, \"proj:geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"proj:bbox\": [..], \"proj:shape\": [8192, 8192], \"proj:transform\": [...], \"datetime\": \"2021-03-19T02:27:33.266356Z\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [...] }, \"links\": [], \"assets\": { \"asset\": { \"href\": \"raster.tif\" } }, \"bbox\": [...], \"stac_extensions\": [\"proj\"] } $ rio stac S-2_20200422_COG.tif \\ -d 2020-04-22 \\ -e proj -e comments \\ -c myprivatecollection \\ -p comments:name=myfile \\ --id COG \\ -n mosaic \\ --asset-href https://somewhere.overtherainbow.io/S-2_20200422_COG.tif \\ --asset-mediatype COG | jq { \"type\": \"Feature\", \"stac_version\": \"1.0.0-beta.2\", \"id\": \"COG\", \"properties\": { \"comments:name\": \"myfile\", \"proj:epsg\": 32632, \"proj:geometry\": { \"type\": \"Polygon\", \"coordinates\": [...] }, \"proj:bbox\": [...], \"proj:shape\": [28870, 33145], \"proj:transform\": [...], \"datetime\": \"2020-04-22T00:00:00Z\" }, \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [...]}, \"links\": [], \"assets\": { \"mosaic\": { \"href\": \"https://somewhere.overtherainbow.io/S-2_20200422_COG.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\" } }, \"bbox\": [...], \"stac_extensions\": [ \"proj\", \"comments\" ], \"collection\": \"myprivatecollection\" }","title":"Example"},{"location":"intro/#api","text":"see: api","title":"API"},{"location":"release-notes/","text":"0.1.1 (2021-03-19) \u00b6 fix CLI asset-href default 0.1.0 (2021-03-19) \u00b6 Initial release. Design API add CLI add tests write docs","title":"Release Notes"},{"location":"release-notes/#011-2021-03-19","text":"fix CLI asset-href default","title":"0.1.1 (2021-03-19)"},{"location":"release-notes/#010-2021-03-19","text":"Initial release. Design API add CLI add tests write docs","title":"0.1.0 (2021-03-19)"},{"location":"api/rio_stac/stac/","text":"Module rio_stac.stac \u00b6 Create STAC Item from a rasterio dataset. None Functions \u00b6 bbox_to_geom \u00b6 def bbox_to_geom ( bbox : Tuple [ float , float , float , float ] ) -> Dict Return a geojson geometry from a bbox. create_stac_item \u00b6 def create_stac_item ( source : Union [ str , rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], input_datetime : Union [ datetime . datetime , NoneType ] = None , extensions : Union [ List [ str ], NoneType ] = None , collection : Union [ str , NoneType ] = None , properties : Union [ Dict , NoneType ] = None , id : Union [ str , NoneType ] = None , assets : Union [ Dict [ str , pystac . item . Asset ], NoneType ] = None , asset_name : str = 'asset' , asset_roles : Union [ List [ str ], NoneType ] = None , asset_media_type : Union [ str , pystac . media_type . MediaType , NoneType ] = None , asset_href : Union [ str , NoneType ] = None ) -> pystac . item . Item Create a Stac Item. Parameters: Name Type Description Default source str or rasterio openned dataset input path or rasterio dataset. None input_datetime datetime.datetime datetime associated with the item. None extensions list of str input list of extensions to use in the item. None collection str collection's name the item belong to. None properties dict additional properties to add in the item. None id str id to assign to the item (default to the source basename). None assets dict Assets to set in the item. If set we won't create one from the source. None asset_name str asset name in the Assets object. None asset_roles list of str list of asset's role. None asset_media_type str or pystac.MediaType asset's media type. None asset_href str asset's URI (default to input path). None Returns: Type Description pystac.Item valid STAC Item. get_media_type \u00b6 def get_media_type ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Union [ pystac . media_type . MediaType , NoneType ] Find MediaType for a raster dataset. get_metadata \u00b6 def get_metadata ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get Raster Metadata.","title":"rio_stac.stac"},{"location":"api/rio_stac/stac/#module-rio_stacstac","text":"Create STAC Item from a rasterio dataset. None","title":"Module rio_stac.stac"},{"location":"api/rio_stac/stac/#functions","text":"","title":"Functions"},{"location":"api/rio_stac/stac/#bbox_to_geom","text":"def bbox_to_geom ( bbox : Tuple [ float , float , float , float ] ) -> Dict Return a geojson geometry from a bbox.","title":"bbox_to_geom"},{"location":"api/rio_stac/stac/#create_stac_item","text":"def create_stac_item ( source : Union [ str , rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ], input_datetime : Union [ datetime . datetime , NoneType ] = None , extensions : Union [ List [ str ], NoneType ] = None , collection : Union [ str , NoneType ] = None , properties : Union [ Dict , NoneType ] = None , id : Union [ str , NoneType ] = None , assets : Union [ Dict [ str , pystac . item . Asset ], NoneType ] = None , asset_name : str = 'asset' , asset_roles : Union [ List [ str ], NoneType ] = None , asset_media_type : Union [ str , pystac . media_type . MediaType , NoneType ] = None , asset_href : Union [ str , NoneType ] = None ) -> pystac . item . Item Create a Stac Item. Parameters: Name Type Description Default source str or rasterio openned dataset input path or rasterio dataset. None input_datetime datetime.datetime datetime associated with the item. None extensions list of str input list of extensions to use in the item. None collection str collection's name the item belong to. None properties dict additional properties to add in the item. None id str id to assign to the item (default to the source basename). None assets dict Assets to set in the item. If set we won't create one from the source. None asset_name str asset name in the Assets object. None asset_roles list of str list of asset's role. None asset_media_type str or pystac.MediaType asset's media type. None asset_href str asset's URI (default to input path). None Returns: Type Description pystac.Item valid STAC Item.","title":"create_stac_item"},{"location":"api/rio_stac/stac/#get_media_type","text":"def get_media_type ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Union [ pystac . media_type . MediaType , NoneType ] Find MediaType for a raster dataset.","title":"get_media_type"},{"location":"api/rio_stac/stac/#get_metadata","text":"def get_metadata ( src_dst : Union [ rasterio . io . DatasetReader , rasterio . io . DatasetWriter , rasterio . vrt . WarpedVRT , rasterio . io . MemoryFile ] ) -> Dict Get Raster Metadata.","title":"get_metadata"}]}